{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"canvas-button-response\",\n  parameters: {\n    /** The drawing function to apply to the canvas. Should take the canvas object as argument. */\n    stimulus: {\n      type: ParameterType.FUNCTION,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the label(s) for the button(s). */\n    choices: {\n      type: ParameterType.STRING,\n      pretty_name: \"Choices\",\n      default: undefined,\n      array: true,\n    },\n    /** The html of the button. Can create own style. */\n    button_html: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Button HTML\",\n      default: '<button class=\"jspsych-btn\">%choice%</button>',\n      array: true,\n    },\n    /** Any content here will be displayed under the button. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to hide the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show the trial. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** The vertical margin of the button. */\n    margin_vertical: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin vertical\",\n      default: \"0px\",\n    },\n    /** The horizontal margin of the button. */\n    margin_horizontal: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin horizontal\",\n      default: \"8px\",\n    },\n    /** If true, then trial will end when user responds. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** Array containing the height (first value) and width (second value) of the canvas element. */\n    canvas_size: {\n      type: ParameterType.INT,\n      array: true,\n      pretty_name: \"Canvas size\",\n      default: [500, 500],\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **canvas-button-response**\n *\n * jsPsych plugin for displaying a canvas stimulus and getting a button response\n *\n * @author Chris Jungerius (modified from Josh de Leeuw)\n * @see {@link https://www.jspsych.org/plugins/jspsych-canvas-button-response/ canvas-button-response plugin documentation on jspsych.org}\n */\nclass CanvasButtonResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // create canvas\n    var html =\n      '<div id=\"jspsych-canvas-button-response-stimulus\">' +\n      '<canvas id=\"jspsych-canvas-stimulus\" height=\"' +\n      trial.canvas_size[0] +\n      '\" width=\"' +\n      trial.canvas_size[1] +\n      '\"></canvas>' +\n      \"</div>\";\n\n    //display buttons\n    var buttons = [];\n    if (Array.isArray(trial.button_html)) {\n      if (trial.button_html.length == trial.choices.length) {\n        buttons = trial.button_html;\n      } else {\n        console.error(\n          \"Error in canvas-button-response plugin. The length of the button_html array does not equal the length of the choices array\"\n        );\n      }\n    } else {\n      for (var i = 0; i < trial.choices.length; i++) {\n        buttons.push(trial.button_html);\n      }\n    }\n    html += '<div id=\"jspsych-canvas-button-response-btngroup\">';\n    for (var i = 0; i < trial.choices.length; i++) {\n      var str = buttons[i].replace(/%choice%/g, trial.choices[i]);\n      html +=\n        '<div class=\"jspsych-canvas-button-response-button\" style=\"display: inline-block; margin:' +\n        trial.margin_vertical +\n        \" \" +\n        trial.margin_horizontal +\n        '\" id=\"jspsych-canvas-button-response-button-' +\n        i +\n        '\" data-choice=\"' +\n        i +\n        '\">' +\n        str +\n        \"</div>\";\n    }\n    html += \"</div>\";\n\n    //show prompt if there is one\n    if (trial.prompt !== null) {\n      html += trial.prompt;\n    }\n    display_element.innerHTML = html;\n\n    //draw\n    let c = document.getElementById(\"jspsych-canvas-stimulus\");\n    trial.stimulus(c);\n\n    // start time\n    var start_time = performance.now();\n\n    // add event listeners to buttons\n    for (var i = 0; i < trial.choices.length; i++) {\n      display_element\n        .querySelector<HTMLButtonElement>(\"#jspsych-canvas-button-response-button-\" + i)\n        .addEventListener(\"click\", (e: MouseEvent) => {\n          var btn_el = e.currentTarget as Element;\n          var choice = btn_el.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n          after_response(choice);\n        });\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        response: response.button,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice) {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = parseInt(choice);\n      response.rt = rt;\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-canvas-button-response-stimulus\").className +=\n        \" responded\";\n\n      // disable all the buttons after a response\n      var btns = document.querySelectorAll(\".jspsych-canvas-button-response-button button\");\n      for (var i = 0; i < btns.length; i++) {\n        //btns[i].removeEventListener('click');\n        btns[i].setAttribute(\"disabled\", \"disabled\");\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    // hide image if timing is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-canvas-button-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.randomization.randomInt(0, trial.choices.length - 1),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(`div[data-choice=\"${data.response}\"] button`),\n        data.rt\n      );\n    }\n  }\n}\n\nexport default CanvasButtonResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","FUNCTION","pretty_name","default","undefined","choices","STRING","array","button_html","HTML_STRING","prompt","stimulus_duration","INT","trial_duration","margin_vertical","margin_horizontal","response_ends_trial","BOOL","canvas_size","CanvasButtonResponsePlugin","jsPsych","_classCallCheck","this","display_element","trial","_this","html","buttons","Array","isArray","length","console","error","i","push","str","replace","innerHTML","c","document","getElementById","start_time","performance","now","querySelector","addEventListener","e","after_response","currentTarget","getAttribute","response","rt","button","end_trial","pluginAPI","clearAllTimeouts","trial_data","finishTrial","choice","end_time","Math","round","parseInt","className","btns","querySelectorAll","setAttribute","setTimeout","style","visibility","value","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","default_data","randomization","sampleExGaussian","randomInt","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","clickTarget","concat"],"mappings":"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"}